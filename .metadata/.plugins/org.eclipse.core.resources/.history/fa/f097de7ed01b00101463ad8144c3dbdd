/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "RCC_interface.h"
#include "SysTick_interface.h"
#include "GPIO_interface.h"


int main(void)
{/*     Configure  to use HSI and set system clock
 */

 	RCC_SETCLK(HSI, RCC_ON);


 	    RCC_SETSYSCLK(SW_HSI);   //  Switch system clock to PLL

 	    SystemCoreClockUpdate();   // Update core clock variable

 	    SysTick_Init(ProcessorAHB); // Initialize SysTick with new frequency

 	    RCC_AHB1_enable(GPIOAEN);   // Enable GPIOA
 	   RCC_AHB1_enable(GPIOCEN);   // Enable GPIOC clock
 	/*Configure PA5 as output for the LED*/
 pin_configer_t PINA5_LED ={
 		.port=PORTA,
 		.pinNum=5,
 	 	.mode=OUTPUT,
 		.speed=LOW,
 		.outputtype=PUSH_PULL,
 		.pulltype=NOPULL
 	};
 GPIO_u8pininit(&PINA5_LED);

	/*Configure Pc13 as input for the button*/
pin_configer_t PINc13_BUTTON={
		.port=PORTC,
		.pinNum=13,
	 	.mode=INPUT,
		.pulltype=PULLUP
	};
GPIO_u8pininit(&PINc13_BUTTON);
    /* Loop forever */

	while(1){
		pinval_t btn_val;

		 GPIO_u8readpinvalue(PORTC, PIN13,&btn_val);

		        if (btn_val == PIN_LOW) {
		            GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH); //  LED ON
		        } else {
		            GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW);  // LED OFF
		        }
		    }
}
